// Package cartservice_server_rest_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.1-0.20240604070534-2f0ff757704b DO NOT EDIT.
package cartservice_server_rest_server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/kurtosis-tech/new-obd/src/cartservice/api/http_rest/types"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add item
	// (POST /cart)
	PostCart(ctx echo.Context) error
	// Empty cart
	// (DELETE /cart/{user_id})
	DeleteCartUserId(ctx echo.Context, userId UserId) error
	// Get cart
	// (GET /cart/{user_id})
	GetCartUserId(ctx echo.Context, userId UserId) error
	// Experimental features
	// (GET /experimental-features)
	GetExperimentalFeatures(ctx echo.Context) error
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCart converts echo context to params.
func (w *ServerInterfaceWrapper) PostCart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCart(ctx)
	return err
}

// DeleteCartUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCartUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCartUserId(ctx, userId)
	return err
}

// GetCartUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCartUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCartUserId(ctx, userId)
	return err
}

// GetExperimentalFeatures converts echo context to params.
func (w *ServerInterfaceWrapper) GetExperimentalFeatures(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExperimentalFeatures(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/cart", wrapper.PostCart)
	router.DELETE(baseURL+"/cart/:user_id", wrapper.DeleteCartUserId)
	router.GET(baseURL+"/cart/:user_id", wrapper.GetCartUserId)
	router.GET(baseURL+"/experimental-features", wrapper.GetExperimentalFeatures)
	router.GET(baseURL+"/health", wrapper.GetHealth)

}

type NotOkJSONResponse ResponseInfo

type PostCartRequestObject struct {
	Body *PostCartJSONRequestBody
}

type PostCartResponseObject interface {
	VisitPostCartResponse(w http.ResponseWriter) error
}

type PostCart200JSONResponse map[string]interface{}

func (response PostCart200JSONResponse) VisitPostCartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCartdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response PostCartdefaultJSONResponse) VisitPostCartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteCartUserIdRequestObject struct {
	UserId UserId `json:"user_id"`
}

type DeleteCartUserIdResponseObject interface {
	VisitDeleteCartUserIdResponse(w http.ResponseWriter) error
}

type DeleteCartUserId200JSONResponse map[string]interface{}

func (response DeleteCartUserId200JSONResponse) VisitDeleteCartUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCartUserIddefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response DeleteCartUserIddefaultJSONResponse) VisitDeleteCartUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetCartUserIdRequestObject struct {
	UserId UserId `json:"user_id"`
}

type GetCartUserIdResponseObject interface {
	VisitGetCartUserIdResponse(w http.ResponseWriter) error
}

type GetCartUserId200JSONResponse Cart

func (response GetCartUserId200JSONResponse) VisitGetCartUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCartUserIddefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetCartUserIddefaultJSONResponse) VisitGetCartUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetExperimentalFeaturesRequestObject struct {
}

type GetExperimentalFeaturesResponseObject interface {
	VisitGetExperimentalFeaturesResponse(w http.ResponseWriter) error
}

type GetExperimentalFeatures200JSONResponse ExperimentalFeatures

func (response GetExperimentalFeatures200JSONResponse) VisitGetExperimentalFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetExperimentalFeaturesdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetExperimentalFeaturesdefaultJSONResponse) VisitGetExperimentalFeaturesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetHealthdefaultJSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add item
	// (POST /cart)
	PostCart(ctx context.Context, request PostCartRequestObject) (PostCartResponseObject, error)
	// Empty cart
	// (DELETE /cart/{user_id})
	DeleteCartUserId(ctx context.Context, request DeleteCartUserIdRequestObject) (DeleteCartUserIdResponseObject, error)
	// Get cart
	// (GET /cart/{user_id})
	GetCartUserId(ctx context.Context, request GetCartUserIdRequestObject) (GetCartUserIdResponseObject, error)
	// Experimental features
	// (GET /experimental-features)
	GetExperimentalFeatures(ctx context.Context, request GetExperimentalFeaturesRequestObject) (GetExperimentalFeaturesResponseObject, error)
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostCart operation middleware
func (sh *strictHandler) PostCart(ctx echo.Context) error {
	var request PostCartRequestObject

	var body PostCartJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCart(ctx.Request().Context(), request.(PostCartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCartResponseObject); ok {
		return validResponse.VisitPostCartResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCartUserId operation middleware
func (sh *strictHandler) DeleteCartUserId(ctx echo.Context, userId UserId) error {
	var request DeleteCartUserIdRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCartUserId(ctx.Request().Context(), request.(DeleteCartUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCartUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCartUserIdResponseObject); ok {
		return validResponse.VisitDeleteCartUserIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCartUserId operation middleware
func (sh *strictHandler) GetCartUserId(ctx echo.Context, userId UserId) error {
	var request GetCartUserIdRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCartUserId(ctx.Request().Context(), request.(GetCartUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCartUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCartUserIdResponseObject); ok {
		return validResponse.VisitGetCartUserIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetExperimentalFeatures operation middleware
func (sh *strictHandler) GetExperimentalFeatures(ctx echo.Context) error {
	var request GetExperimentalFeaturesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetExperimentalFeatures(ctx.Request().Context(), request.(GetExperimentalFeaturesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetExperimentalFeatures")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetExperimentalFeaturesResponseObject); ok {
		return validResponse.VisitGetExperimentalFeaturesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(ctx echo.Context) error {
	var request GetHealthRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx.Request().Context(), request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		return validResponse.VisitGetHealthResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWUW/bNhD+K8RtQF9kW3MGDNNbtqaZMSAJnAQDVgQBS50sthLJkMcuRqD/PpCUa8lW",
	"m25dhw3wA00e77777vidnkDo1miFihwUT2C45S0S2vjPO7T3sgzLEp2w0pDUCop4wGQJGcjw13CqIQPF",
	"W+wP7+OhxQcvLZZQkPWYgRM1tjy4o60Jpo6sVBvoui4YO6OVwxj5QtPlu7AQWhEqCktuTCMFDxAWb13A",
	"8TTw+K3FCgr4ZrFPaJFO3WLdu16pSqdg43RuFT4aFIQlQ2u1hWDSXw6+T8tyRdiu8cGji1iM1QYtyYRW",
	"ErbPYfiZWwpOoMuGvB4Ske129Ju3KChYh5vTMceLz43eB+DW8u3fQ7Pq8z1A5O75vbHo+nr1V99o3SBX",
	"4a6xuvSCpoNl8OC5IknbcFhp23KCAqSikyV8ACIV4QbtNLazR4NWtqiIN6+Qk7cJ2Rhnj8J9CuuU91+Q",
	"N1TveunYryNOPq7wkbemCbdvr/bQ94mSbNERb83YeJkvv5/lP8yWP97keRF/v0O2p6LkhLNw99jnFN5R",
	"1x+hFbrEEdH+Y0xn0KJzfIOTRUsbn/f+boJteus7YXidHOxjZAnZ3ScSuulDovJt8HC2Xl+uIYPVxatL",
	"yOC30/XF6uJ84GIoM7JnY6wA67Prm8o37PRqxZxBIateaVilLaMaWeh75tC+lwIzJumFY95hyUgz7knP",
	"NqjQckImGomK2PXLX184xlUZL6GdOVkii7mFBqBY8aFTyOA9Wpfw5PPv5nnIWRtU3Ego4GSez08gi2Ib",
	"K7gQO2HQSZRCeSPoVQkFXGlHUToS3ejoJ11u/zFNPdDEblzWoPeHmr7M878U/aD+x7J97YVA50LddoEg",
	"GlXcN/SxBD5gWqQhE7Xety23WyiC1LMo52E7Mrx46gWyS23TIOEx2y/jfuD71qFdlbFQ+1n6ehrL3mSx",
	"U+Hu7v9I21lraMtiQ3YZbHCiH8+R/gv0PDcl/y3GzpF6vkKj4WByzarB6OqpPFArJG+VY3/UUtRsZ864",
	"RTZ0NIfsuAaTM/IrcjoZb4Ljod0+pUY6+vLmnHKdeK/jTH+W6DAAkilLU57pKm722j3JdPpe+JrcHnyR",
	"THVuwsek6/Fvv5jNFJSJGsU7hqo0Wqr+1aRJl97zGMdw0IUhCxl420ABNZFxxSIq7W4QdnfdnwEAAP//",
	"5+Lkr5gMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
